// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  key         String   @id
  value       String
  description String
  updatedAt   DateTime @updatedAt
}

model User {
  id String @id // Nanoid

  openAiApiKey    String?
  useOpenAiApiKey Boolean @default(false)

  createdAt DateTime @default(now())

  Stories Story[] // Stories the user owns
  Content StoryContent[] // User-generated content

  OAuth2Identities    OAuth2Identity[]
  Web3EnergyPurchases Web3EnergyPurchase[]
  EnergyGrants        EnergyGrant[]

  LoresCreated      Lore[]
  CharactersCreated Character[]
}

model OAuth2Identity {
  providerId String
  userId     String

  externalId String

  accessToken String
  tokenType   String
  scope       String?

  expiresAt    DateTime
  refreshToken String?

  User User @relation(fields: [userId], references: [id])

  @@id([providerId, userId])
}

model Web3EnergyPurchase {
  userId String

  blockNumber Int
  logIndex    Int
  txHash      String

  value  Bytes // In wei
  amount Float // In energy

  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])

  @@id([blockNumber, logIndex])
}

model EnergyGrant {
  id     Int    @id @default(autoincrement())
  userId String

  reason String
  amount Float

  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])
}

model Lore {
  id Int @id @default(autoincrement())

  creatorId String // Id of the user who created the lore

  public Boolean @default(false)

  name  String
  about String
  setup String // Present in all prompts

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Creator User @relation(fields: [creatorId], references: [id])

  Characters Character[]
  Stories    Story[]
}

model Character {
  id Int @id @default(autoincrement())

  loreId    Int
  creatorId String // Id of the user who created the character

  public Boolean @default(false)

  name        String // E.g. "Spot"
  about       String // Short description
  personality String // Used in a prompt, should be hidden from the user

  erc1155Token String? // JSON object with ERC1155 NFT data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Lore    Lore @relation(fields: [loreId], references: [id])
  Creator User @relation(fields: [creatorId], references: [id])

  Stories Story[] // Stories the character is participating in
  Content StoryContent[] // Content created by the character (user-controlled or not)
}

model Story {
  id String @id // Nanoid

  userId     String // Id of the user who owns the story
  loreId     Int // Id of the lore used in the story
  charIds    Int[] // All characters in the story (including user-controlled ones)
  userCharId Int // The character controlled by the user

  name   String? // Display name of the story
  fabula String? // The initial context of the story, further augmented by memories

  summary    String? // The summary of the story until the latest checkpoint
  checkpoint Int? // The id until which the content is summarized into memories
  reason     String? // Reason for failure, if any

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Owner      User           @relation(fields: [userId], references: [id])
  Lore       Lore           @relation(fields: [loreId], references: [id])
  Characters Character[]
  Content    StoryContent[]
}

model StoryContent {
  id Int @id @default(autoincrement())

  storyId String
  charId  Int

  // TODO: Remove; may use tokenUsage and energyUsage instead
  userId String? // If null, the content is generated by the system

  content     String
  tokenLength Int // Total number of tokens in the content
  tokenUsage  Int // Total number of tokens used to generate the content
  energyUsage Float? // Total energy used to generate the content, if any

  createdAt DateTime @default(now())

  Story     Story     @relation(fields: [storyId], references: [id])
  Character Character @relation(fields: [charId], references: [id])
  User      User?     @relation(fields: [userId], references: [id])
}
